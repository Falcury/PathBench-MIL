from slideflow.mil import mil
from slideflow.model.extractors._factory_torch import TorchFeatureExtractor
from slideflow.model.extractors import register_torch
from torchvision.models.resnet import Bottleneck, ResNet
import torch
from torchvision import transforms

import timm
from timm.data import resolve_data_config
from timm.data.transforms_factory import create_transform
from huggingface_hub import login
import os

class ResNetTrunk(ResNet):
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        del self.fc  # remove FC layer

    def forward(self, x):
        x = self.conv1(x)
        x = self.bn1(x)
        x = self.relu(x)
        x = self.maxpool(x)

        x = self.layer1(x)
        x = self.layer2(x)
        x = self.layer3(x)
        x = self.layer4(x)
        return x

def get_pretrained_url(key):
    URL_PREFIX = "https://github.com/lunit-io/benchmark-ssl-pathology/releases/download/pretrained-weights"
    model_zoo_registry = {
        "BT": "bt_rn50_ep200.torch",
        "MoCoV2": "mocov2_rn50_ep200.torch",
        "SwAV": "swav_rn50_ep200.torch",
    }
    pretrained_url = f"{URL_PREFIX}/{model_zoo_registry.get(key)}"
    return pretrained_url

def download_pretrained_weights(key, destination):
    pretrained_url = get_pretrained_url(key)
    if not os.path.exists(destination):
        os.makedirs(os.path.dirname(destination), exist_ok=True)
        print(f"Downloading pretrained weights for {key}...")
        torch.hub.download_url_to_file(pretrained_url, destination)
        print("Pretrained weights downloaded successfully.")
    else:
        print(f"Pretrained weights for {key} already exist, skipping download.")

def resnet50(pretrained, progress, key, **kwargs):
    model = ResNetTrunk(Bottleneck, [3, 4, 6, 3], **kwargs)
    if pretrained:
        weights_path = f"pretrained_weights/{key}.torch"
        pretrained_url = get_pretrained_url(key)
        download_pretrained_weights(key, weights_path)
        model.load_state_dict(torch.load(weights_path))
    return model

@register_torch
class barlow_twins_feature_extractor(TorchFeatureExtractor):

    tag = 'barlow_twins_feature_extractor'

    def __init__(self, tile_px=256):
        super().__init__()

        # Load ResNet50 trunk with Barlow Twins pre-trained weights
        self.model = resnet50(pretrained=True, progress=False, key="BT")
        self.model.to('cuda')  # Move model to GPU if available
        self.model.eval()  # Set the model to evaluation mode

        # Set the number of features generated by the model
        self.num_features = 2048  # Assuming ResNet50 output features of size 2048

        self.transform = transforms.Compose([
            transforms.Lambda(lambda x: x / 255.)
        ])

        # Slideflow standardization
        self.preprocess_kwargs = {'standardize': True}

    def dump_config(self):
        return {
            'class': 'barlow_twins_feature_extractor',
            'kwargs': {}
        }


@register_torch
class mocov2_feature_extractor(TorchFeatureExtractor):

    tag = 'mocov2_feature_extractor'

    def __init__(self, tile_px=256):
        super().__init__()

        # Load ResNet50 trunk with Barlow Twins pre-trained weights
        self.model = resnet50(pretrained=True, progress=False, key="MoCoV2")
        self.model.to('cuda')  # Move model to GPU if available
        self.model.eval()  # Set the model to evaluation mode

        # Set the number of features generated by the model
        self.num_features = 2048  # Assuming ResNet50 output features of size 2048

        self.transform = transforms.Compose([
            transforms.Lambda(lambda x: x / 255.)
        ])

        # Slideflow standardization
        self.preprocess_kwargs = {'standardize': True}

    def dump_config(self):
        return {
            'class': 'mocov2_feature_extractor',
            'kwargs': {}
        }


@register_torch
class swav_feature_extractor(TorchFeatureExtractor):
    tag = 'swav_feature_extractor'

    def __init__(self, tile_px=256):
        super().__init__()

        # Load ResNet50 trunk with Barlow Twins pre-trained weights
        self.model = resnet50(pretrained=True, progress=False, key="SwAV")
        self.model.to('cuda')  # Move model to GPU if available
        self.model.eval()  # Set the model to evaluation mode

        # Set the number of features generated by the model
        self.num_features = 2048  # Assuming ResNet50 output features of size 2048

        self.transform = transforms.Compose([
            transforms.Lambda(lambda x: x / 255.)
        ])

        # Slideflow standardization
        self.preprocess_kwargs = {'standardize': True}

    def dump_config(self):
        return {
            'class': 'swav_feature_extractor',
            'kwargs': {}
        }
    

@register_torch
class uni(TorchFeatureExtractor):
    tag = "uni"

    def __init__(self, tile_px=256):
        super().__init__()

        login()
        self.model = timm.create_model("hf-hub:MahmoodLab/uni", pretrained=True,
                                       init_values=1e-5, dynamic_img_size=True)
        self.transform  = create_transform(**resolve_data_config(self.model.pretrained_cfg, model=self.model))
        self.model.to('cuda')
        self.model.eval()

        self.preprocess_kwargs = {'standardize': True}

    def dump_config(self):
        return {
            'class': 'uni',
            'kwargs': {}
        }